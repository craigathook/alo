{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/alo.js","src/utils/createjs/AnimationCanvas.js","src/utils/createjs/AnimationLoader.js","src/utils/createjs/ModuleLoader.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbvtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"alo.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var ModuleLoader = require('./utils/createjs/ModuleLoader');\r\nvar AnimationLoader = require('./utils/createjs/AnimationLoader');\r\nvar AnimationCanvas = require('./utils/createjs/AnimationCanvas');\r\n\r\nfunction Alo() {\r\n\r\n  this.module = new ModuleLoader();\r\n  this.loader = new AnimationLoader();\r\n  this.load = this.loader.load;\r\n  this.Canvas = AnimationCanvas;\r\n\r\n}\r\n\r\nwindow.alo = new Alo();","function AnimationCanvas(animation, target, callback, options) {\r\n  //console.log('AnimationCanvas: instance');\r\n  this.canvas;\r\n  this.stage;\r\n  this.exportRoot;\r\n  this.loadError;\r\n\r\n  var defaults = {\r\n    transparent: false,\r\n    onTick: null\r\n  };\r\n\r\n  var options = mergeOptions(defaults, options);\r\n\r\n  this.target = target;\r\n  this.transparent = options.transparent;\r\n  this.onTick = options.onTick;\r\n  this.onLoaded = callback;\r\n\r\n  var loader = new createjs.LoadQueue(false);\r\n  var lib;\r\n  var images = animation.images;\r\n  var ss;\r\n  var ssUrl = animation.ssUrl;\r\n\r\n  if(animation) {\r\n    lib = animation.lib;\r\n    //images = animation.img;\r\n    ss = animation.ss;\r\n  }\r\n\r\n  this.init = function() {\r\n    //console.log('AnimationCanvas: init()');\r\n    createjs.MotionGuidePlugin.install();\r\n\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.setAttribute('id', 'canvas');\r\n    this.canvas.setAttribute('width', lib.properties.width);\r\n    this.canvas.setAttribute('height', lib.properties.height);\r\n    if(!this.transparent) {\r\n      this.canvas.setAttribute('style', 'style=\"background-color:\"' + lib.properties.color);\r\n    }\r\n\r\n    loader.addEventListener('fileload', this.handleFileLoad);\r\n    loader.addEventListener('complete', this.handleComplete);\r\n    loader.addEventListener('error', this.handleError);\r\n\r\n    if (lib.properties.manifest.length == 0) {\r\n        //console.log('AnimationCanvas: Loading spritesheet.');\r\n        loader.loadFile({src: ssUrl+'/index_atlas_.json', type: 'spritesheet', id: 'index_atlas_'}, true);\r\n    } else {\r\n      //console.log('AnimationCanvas: Loading images.');\r\n      loader.loadManifest(lib.properties.manifest);\r\n    }\r\n  }.bind(this);\r\n\r\n  this.handleFileLoad = function(evt) {\r\n    //console.log('AnimationCanvas: handleFileLoad()',evt.item.id);\r\n    if (evt.item.type == 'image') {\r\n      images[evt.item.id] = evt.result;\r\n      //window.img[evt.item.id] = evt.result;\r\n    }\r\n  }.bind(this);\r\n\r\n  this.handleError = function (err) {\r\n    //console.log('AnimationCanvas: Error loading images.');\r\n    if(err.data.src == 'images/index_atlas_.json') {\r\n      //console.log('AnimationCanvas: No images found.');\r\n    }\r\n    loader.removeEventListener('complete', this.handleComplete);\r\n    this.handleComplete(null);\r\n    \r\n  }.bind(this);\r\n\r\n  this.handleComplete = function (evt) {\r\n    //console.log('AnimationCanvas: handleComplete()');\r\n    images = {};\r\n    if(evt) {\r\n      var queue = evt.target;\r\n      ss['index_atlas_'] = queue.getResult('index_atlas_');\r\n    }\r\n\r\n    this.exportRoot = new lib.index();\r\n\r\n    window.exportRoot = this.exportRoot;\r\n\r\n    if(this.target) {\r\n      this.target.appendChild(this.canvas);\r\n    } else {\r\n      document.body.appendChild(this.canvas);\r\n    }\r\n\r\n    devicePixelRatio = window.devicePixelRatio || 1;\r\n\r\n    this.pixelRatio = devicePixelRatio;\r\n\r\n    if (devicePixelRatio < 1) {\r\n      devicePixelRatio = 1;\r\n    }\r\n\r\n    if(window.hasOwnProperty('RetinaStage')) {\r\n      this.stage = new RetinaStage(this.canvas, devicePixelRatio);\r\n    } else {\r\n      this.stage = new createjs.Stage(this.canvas);\r\n    }\r\n\r\n    this.stage.addChild(this.exportRoot);\r\n    this.stage.enableMouseOver(24);\r\n    createjs.Touch.enable(this.stage);\r\n    this.stage.root = this.stage.children[0];\r\n    this.stage.lib = lib;\r\n    this.stage.container = this.target;\r\n    this.onLoaded(this.stage);\r\n    this.stage.update();\r\n\r\n    createjs.Ticker.setFPS(lib.properties.fps);\r\n    //createjs.Ticker.setFPS(60);\r\n    if(this.onTick) {\r\n      createjs.Ticker.addEventListener('tick', this.onTick);\r\n    }\r\n    createjs.Ticker.addEventListener('tick', this.stage);\r\n\r\n  }.bind(this);\r\n\r\n  function mergeOptions(obj1,obj2){\r\n    var obj3 = {};\r\n    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }\r\n    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }\r\n    return obj3;\r\n  }\r\n\r\n  this.init();\r\n}\r\n\r\nmodule.exports = AnimationCanvas;\r\n","var AnimationCanvas = require('./AnimationCanvas');\r\n\r\nfunction AnimationLoader() {\r\n  //console.log('AnimationLoader: instance');\r\n\r\n  var loadManifest = [];\r\n  var loadIndex = 0;\r\n  var loadScript;\r\n\r\n  if(window.hasOwnProperty('Enabler')) {\r\n    loadScript = Enabler.loadScript;\r\n  } else {\r\n    loadScript = scriptLoader;\r\n  }\r\n\r\n  this.animationLoaded = function(e) {\r\n    //console.log('AnimationLoader: animationLoaded');\r\n    var animationData = {};\r\n    animationData.lib = window.lib;\r\n    animationData.images = window.images;\r\n    animationData.img = {};\r\n    animationData.ss = window.ss;\r\n    animationData.ssUrl = this.name+'/images';\r\n\r\n    window.lib = null;\r\n    window.ss = null;\r\n\r\n    //console.log(animationData);\r\n\r\n    // prepend the animation name to the image urls\r\n    if(animationData.lib.properties.manifest) {\r\n      for(var i in animationData.lib.properties.manifest) {\r\n        animationData.lib.properties.manifest[i].src = this.name + '/' + animationData.lib.properties.manifest[i].src;\r\n      }\r\n    }\r\n    /*\r\n    if(animationData.ss) {\r\n      for(var i in animationData.ss) {\r\n        console.log('ss',animationData.ss, animationData.ss[i]);\r\n        animationData.ss[i].src = this.name + '/' + animationData.ss[i].src;\r\n      }\r\n    }\r\n    */\r\n\r\n    var target = null;\r\n    if(this.target) {\r\n      if(typeof(this.target) == 'string') {\r\n        target = document.querySelector(this.target);\r\n      } else {\r\n        target = this.target;\r\n      }\r\n      this.options.target = target;\r\n      var newCanvas = new AnimationCanvas(animationData, target, canvasLoaded.bind(this), this.options);\r\n    } else {\r\n      this.callback(animationData);\r\n    }\r\n  };\r\n\r\n  this.load = function(animationName, _target, _callback, _options) {\r\n    var callback = null;\r\n    var target = null;\r\n    var options = _options;\r\n\r\n    if(typeof(_target) == 'function') {\r\n      callback = _target;\r\n    } else {\r\n      target = _target;\r\n      callback = _callback;\r\n    }\r\n\r\n    var loadData = {\r\n      name: animationName,\r\n      callback: callback,\r\n      target: target,\r\n      options: options\r\n    };\r\n\r\n    loadScript(animationName + '/index.js', this.animationLoaded.bind(loadData));\r\n  }.bind(this);\r\n\r\n  function canvasLoaded(stage) {\r\n    this.callback(stage);\r\n  };\r\n\r\n  function scriptLoader(url, callback) {\r\n    // Adding the script tag to the head as suggested before\r\n    var head = document.getElementsByTagName('head')[0];\r\n    var script = document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.src = url;\r\n\r\n    // Then bind the event to the callback function.\r\n    // There are several events for cross browser compatibility.\r\n    script.onreadystatechange = callback;\r\n    script.onload = callback;\r\n\r\n    // Fire the loading\r\n    head.appendChild(script);\r\n  } /**/\r\n}\r\n\r\nmodule.exports = AnimationLoader;\r\n","var AnimationLoader = require('./AnimationLoader');\r\nvar AnimationCanvas = require('./AnimationCanvas');\r\n\r\nvar loader = new AnimationLoader();\r\n\r\nfunction ModuleLoader() {\r\n\r\n  this.load = function(animationName, target, _module, options) {\r\n    var options = options || {};\r\n    if(typeof(target) == 'string') {\r\n      target = document.querySelector(target);\r\n    }\r\n    //console.log('ModuleLoader: load:', animationName);\r\n    var moduleData = {\r\n      name: animationName,\r\n      target: target,\r\n      module: _module,\r\n      callback: options.onLoaded || function(){},\r\n      options: options,\r\n      animationData: null\r\n    };\r\n\r\n    loader.load(animationName, this.loadComplete.bind(moduleData));\r\n\r\n  }.bind(this);\r\n\r\n  this.loadComplete = function(animationData) {\r\n    this.animationData = animationData;\r\n    expand = new AnimationCanvas(animationData, this.target, moduleLoaded.bind(this), this.options);\r\n  };\r\n\r\n  function moduleLoaded(stage) {\r\n    //console.log('ModuleLoader: moduleLoaded');\r\n    var moduleInstance = new this.module(stage, this.animationData);\r\n    this.callback(moduleInstance);\r\n  }\r\n}\r\n\r\nmodule.exports = ModuleLoader;\r\n"]}